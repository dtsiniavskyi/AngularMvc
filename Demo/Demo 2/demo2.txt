1. Навчився сортувати по групам темплейти (якшо вручну ...)
	- якшо візард то треба попробувати кодом копіювати файли темплейта
2. Демо проект візарда
3. Додав реєстрацію через аспнет ідентіті і кор апі
4. bootstrap 4 і sbadmin 2 ... 
   https://github.com/start-angular/SB-Admin-BS4-Angular-5
   є сб адмін і бутстрап 4 ...
   було б добре обновити бутстрап ...

Авторизація:
- не юзати куки
- session бейсд уже не підходить, бо у нас стейтлес апі
  не підійде старий підхід бо те що рендериться на клієнті раніше вирішувалось на сервері
- JsonWebToken (JWT) based authentication
   + різні типи клієнтів
   + на веб клієнті компоненти мають бути також захищені
- клеймі і полісіс vs roles
- authorization as a service
- Найшов і рісьорчу зараз проект: AngularASPNETCore2WebApiAuth JWT
- Feature based folder structure vs Role based
	- Великим плюсом є те шо цілу фічу легко додати або видалити при генерації проекту з темплейту а нам це важливо
	- В асп нет корі всеодно де тримати контролери
	- Так як у нас апі то не треба реконфіжити вю енджін шоб він шукав вюху бо вюх як таких нема
- Розділив Auth feature & Users feature бо можем юзати 
  Authorization-as-a-Service (Bitium, Azure Active Directory, Auth0, Firebase and others)


Ішус:
	- буває шо треба перегружати візуал студію шоб запустити візард темплейт при розробці
	- коли прорект генерується то нпм автоматично встановлює пекеджі і це займає час
		- вирубити автоматичний нпм інстал неможливо 
		  (без встановлення естеншна і це буде глобальний конфіг, 
		   для всіх проектів а не тільки для цього) того треба чекати
	- Думаю чи юзати айдентіті для юзер менеджменту, пасворд ресторінг, веріфікейшн чи самому імплементити. 
	  Заюзати просто не получиться бо треба переписувати контролери. Пробую переюзати сервіси шоб не писати наново.
	

Челенджес:
	- темплейт треба структуризувати так що можна було легко відключати фічі
	  тобто при розробці треба брати до уваги те як він буде генеруватись
	- треба придумати якись кращий спосіб рендерити бо $if$ не дуже вже і функціональний синтаксис
	- треба придумати зручний механізм шоб задавати матрицю, 
	  яка визначає чи треба додавати проджект айтем (файл або папку) в солюшн
	  бо чим далі тим буде складніше формувати темплейт
	

Далі рісьорч:    
	- Флуент валідейшнс
	- мульти проджект темплейт	
	- апдейтнути версію бутсрапа, зараз 3,3,7 а треба 4
	  (треба порісьорчити чи сб адмін сумісний 3 4им бутстрапом, бо якшо нє то не апдейтити 
	  або визначати версію бутстрапа при генерації темплейта)
	- потенційний спосіб уникнути мусорного коду ізза великої кількості $if$ - 
      якраз мультипроджект темплейт де кожна можлива конфігурація представлена окремим проектом
      і в результат буде генеруватись тільки той проект який відповідає конфігурації
      (мені не подобається цей спосіб бо спільний контент треба буде едітити по пару раз в кожному з проектів)
	- T4 templating language як один із варіантів рішити проблему з $if$
	- ng-bootstrap
	- single sign on
	
	
Наступні Фічі:
	- Відправка імейлів (Можна додати декілька імплементацій, вибрати спосіб збереження імейл темплейтів у візарді. 
	  Типу якщо у ресурсах то юзер не зможе редагувати темплейти. Якщо в базі даних то можна додати адмінку для їх редагування як фічу.)
	- Error Handling



- maybe a good idea would be to explicitly specify the arrays of values for each configuration. 
  And it can be aslo stored in some kind of a table/matrix format or csv file.
  for example we have configuration SbAdminWithDash. It will have an array/collection/dictionary of arguments like:
  $includebootstrap$=true,$includemoris$=true etc.